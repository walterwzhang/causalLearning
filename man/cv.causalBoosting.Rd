% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv.causalBoosting.R
\name{cv.causalBoosting}
\alias{cv.causalBoosting}
\title{Fit a causal boosting model with cross validation}
\usage{
cv.causalBoosting(x, tx, y, num.trees = 500, maxleaves = 4, eps = 0.01,
  splitSpread = 0.1, type.measure = c("effect", "response"), nfolds = 5,
  foldid = NULL, propensity = FALSE, stratum = NULL, isConstVar = TRUE)
}
\arguments{
\item{x}{matrix of covariates}

\item{tx}{vector of treatment indicators (0 or 1)}

\item{y}{vector of response values}

\item{num.trees}{number of shallow causal trees to build}

\item{maxleaves}{maximum number of leaves per causal tree}

\item{eps}{learning rate}

\item{splitSpread}{how far apart should the candidate splits be for the
causal trees? (e.g. \code{splitSpread = 0.1}) means we consider 10 quantile
cutpoints as candidates for making split}

\item{type.measure}{loss to use for cross validation:
'response' returns mean-square error for predicting response in each arm.
'effect' returns MSE for treatment effect using honest over-fit estimation.}

\item{nfolds}{number of cross validation folds}

\item{foldid}{vector of fold membership}

\item{propensity}{logical: should propensity score stratification be used?}

\item{stratum}{optional vector giving propensity score stratum for each
observation (only used if \code{propensity = TRUE})}

\item{isConstVar}{logical: for the causal tree splitting criterion
(T-statistc), should it be assumed that the noise variance is the same in
treatment and control arms?}
}
\value{
an object of class \code{cv.causalBoosting} which is an object of
 class \code{causalBoosting} with these additional attributes:
 \itemize{
   \item num.trees.min: number of trees with lowest CV error
   \item cvm: vector of mean CV error for each number of trees
   \item cvsd: vector of standard errors for mean CV errors
 }
}
\description{
Fit a causal boosting model with cross validation
}
\examples{
# Randomized experiment example

n = 100 # number of training-set patients to simulate
p = 10  # number of features for each training-set patient

# Simulate data
x = matrix(rnorm(n * p), nrow = n, ncol = p) # simulate covariate matrix
tx_effect = x[, 1] + (x[, 2] > 0) # simple heterogeneous treatment effect
tx = rbinom(n, size = 1, p = 0.5) # random treatment assignment
y = rowMeans(x) + tx * tx_effect + rnorm(n, sd = 0.001) # simulate response

# Estimate causal boosting model with cross-validation
fit_cv = cv.causalBoosting(x, tx, y)
fit_cv$num.trees.min.effect # number of trees chosen by cross-validation
pred_cv = predict(fit_cv, newx = x)

# Visualize results
plot(tx_effect, pred_cv, main = 'Causal boosting w/ CV',
 xlab = 'True treatment effect', ylab = 'Estimated treatment effect')
abline(0, 1, lty = 2)

}
